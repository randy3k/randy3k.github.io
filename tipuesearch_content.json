{"pages":[{"title":"About","text":"About Welcome. I am Randy Lai, an Assistant professor at the University of Maine, the Department of Mathematics and Statsitics. Previously obatined a PhD degree in Statistics from University of California, Davis. I am from Hong Kong. You can contact me via randy.cs.lai@gmail.com chushing.lai@maine.edu Programming enthusiast I like learning new programming langauges. These are the languages that I have experiences with (ordered by time): php , mysql , R , c , python , julia and coffeescript . If I have more time, I would also like to learn ruby , java , go and many others...","url":"about.html","tags":"pages"},{"title":"Research","text":"My research interests span a number of fields in Statistics. Loosely speaking, they can be divided into three categories: generalized fiducial inference, analysis of high dimensional and massive data, and signal and image processing. Conducting researches is always an excitement to me. I am ready to dedicate myself to be an active and effective researcher.","url":"research.html","tags":"pages"},{"title":"Stuffs","text":"Here is a list of apps/plugins that I have created/ contributed. Check them out: R Stuffs Role is a modern R console which supports syntax highlighting and multiline editing. It is based on the some techonology iPython uses. iterpc helps generating permutations and combinations with in various situations. RSpace is a very crude R GUI on Mac OSX. Julia Stuffs RCall.jl is another julia package interfacing R under the umbrella of JuliaStats. It should have a more promising future. Combinatorics.jl has some algorithms ported from iterpc, see this pull request . Sublime Text 3 AlignTab is a regex alignment plugin which helps Sublime users to align their codes. This plugin is inspired by the Vim plugin tabular . R-Box is a comprehensive set of tools for helping writting R codes in ST. LaTeX is just another LaTeX package for ST. Project-Manager is a project management package. UnitTesting is a unittest framework for ST based on unittest module in python. Whitespace trims whitespaces automatically. One of the developers of GitSavvy , a git package for Sublime Text. Atom Remote-atom is an atom package. It allows editing files remotely via ssh. VIM TmuxVimEdit tell vim over tmux to jump. LaTeXBox is a lightweight latex plugin.","url":"stuffs.html","tags":"pages"},{"title":"Two Cool things about dice!","text":"Just discover two cool things about dice, Suppose we have two (fair) 6-sided dice, let \\(Y\\) be the reminder of the product of the two numbers divided by 7, i.e., \\(Y = X1 \\times X2 (\\text{ mod } 7)\\) , guess what the distribution of \\(Y\\) is? Uniform 1,..., 6 If it doesn't surprise you, now consider two n-sided dice and repeat the above with \\(Y = X_1 \\times X_2 (\\text{ mod } n+1)\\) . Guess what values of \\(n\\) will yield a uniform distribution? It turns out that the values of \\(n\\) are prime numbers minus 1. (As 6 = 7-1 and 7 is a prime number, a regular 6-sided dice has this property). if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","url":"blog/two-cool-things-about-dice.html","tags":"Statistics"},{"title":"Switching between pythons using pyenv on OSX","text":"Installation From pyenv , pyenv lets you easily switch between multiple versions of Python As always, I recommend to use homebrew to install pyenv . Assuming that you have already installed homebrew, to install pyenv , you need brew update brew install pyenv This will also create a hidden folder under your user directory ~/.pyenv . In most cases, you don't have look at this directory. To enable pyenv , put the following into your ~/.bash_profile or ~/.zshrc if you are using zsh . I strongly recommend zsh. Try to install it via homebrew and give it a try. export PYENV_ROOT = \" $HOME /.pyenv\" export PATH = \" $PYENV_ROOT /bin: $PATH \" eval \" $( pyenv init - ) \" To enable shell completions, also add this to your shell config file # for bash shell if [[ -f /usr/local/opt/pyenv/completions/pyenv.bash ]] ; then source /usr/local/opt/pyenv/completions/pyenv.bash fi # for zsh shell if [[ -f /usr/local/opt/pyenv/completions/pyenv.zsh ]] ; then source /usr/local/opt/pyenv/completions/pyenv.zsh fi Resetting your shell terminal, and check if pyenv runs. To list supported versions of python pyenv install --list For academic use, I strongly recommend anaconda3 , e.g., anaconda3-2.1.0 . (Also, give a try to pypy3 ) Installation is a piece of cake. pyenv install anaconda3-2.1.0 It may take some time for the installation process to finish. To show available versions of python pyenv versions You should see system and anaconda3-2.1.0 . System python is the version of python first found along the PATH variable. Switch between To activate anaconda3-2.1.0 in the current terminal session. pyenv shell anaconda3-2.1.0 # check python version python -V # Python 3.4.1 :: Anaconda 2.1.0 (x86_64) If you want to use anaconda3-2.1.0 every time you visit a particular project directory, say ~/project . # unset the shell specific version pyenv shell --unset # go to the project directory cd ~/project pyenv local anaconda3-2.1.0 # check python version python -V # Python 3.4.1 :: Anaconda 2.1.0 (x86_64) Note: you run python -V outside project , you will see the system python. To use anaconda3-2.1.0 globally, run pyenv global anaconda3-2.1.0 . But I don't recommend this. Remove pyenv If you really don't like pyenv and want to remove all traces of pyenv files. Just remove pyenv from homebrew and remove the ~/.pyenv directory. It will do the job. Of course, you have to also undo the changes made to the ~/.bashrc_profile or ~/.zshrc files.","url":"blog/switching-between-pythons-using-pyenv-on-osx.html","tags":"Computing"},{"title":"'Git aware prompt'","text":"I love using git via commands. And it is very often that I have to run git status or git branch to check if I am on the right branch or I am doing anything correct. Git aware prompt displays the current branch and status of the current directory. The code was originated from here but I have made significant amount of changes, for example, adding color support and some bugs fixing. To use this, add the following to your .bashrc and restart your terminal! {% gist 1ff38257f4aaff87f3c7 %}","url":"blog/git-aware-prompt.html","tags":"Computing"},{"title":"'Shortcuts in OSX-Terminal'","text":"There are many useful shortcuts in OSX terminal. You may already know some of them, but I bet you don't know all of them. I am providing a cheat sheet of those keyboard shortcuts. I only list those I think are useful, more can be found here . First of all, you may want to enable the meta key. Movement Command Descriptions Ctrl + a Go to the beginning of the line (Home) Ctrl + e Go to the end of the line (End) Alt + b Back (left) one word Alt + f Forward (right) one word Text Command Descriptions Alt + del Delete the word before the cursor. Alt + d Delete the word after the cursor. Ctrl + u Cut/delete the line before the cursor position. Ctrl + k Cut the line after the cursor to the clipboard. Ctrl + w Cut the word before the cursor to the clipboard. Ctrl + y Paste the last thing to be cut (yank) Misc. Command Descriptions Ctrl + l Clear the screen, similar to the clear command Alt + r Cancel the changes and put back the line as it was in the history (revert). Ctrl + _ Undo","url":"blog/shortcuts-in-osx-terminal.html","tags":"Computing"},{"title":"A simple python webserver","text":"tags : [python] The command has been changed in Python 3: python -m http.server . Python has a very simple web server which allows you to share a particular directory with a one line command. python -m SimpleHTTPServer 8000 Index directory can be then accessed by http://\\ :8000. More complicated usages: Only serve on localhost import sys import BaseHTTPServer from SimpleHTTPServer import SimpleHTTPRequestHandler HandlerClass = SimpleHTTPRequestHandler ServerClass = BaseHTTPServer . HTTPServer Protocol = \"HTTP/1.0\" if sys . argv [ 1 :]: port = int ( sys . argv [ 1 ]) else : port = 8000 server_address = ( '127.0.0.1' , port ) HandlerClass . protocol_version = Protocol httpd = ServerClass ( server_address , HandlerClass ) sa = httpd . socket . getsockname () print \"Serving HTTP on\" , sa [ 0 ], \"port\" , sa [ 1 ], \"...\" httpd . serve_forever () and Simple Python Webserver to save file from os import curdir from os.path import join as pjoin from http.server import BaseHTTPRequestHandler , HTTPServer class StoreHandler ( BaseHTTPReque stHandler ): store_path = pjoin ( curdir , 'store.json' ) def do_GET ( self ): if self . path == '/store.json' : with open ( self . store_path ) as fh : self . send_response ( 200 ) self . send_header ( 'Content-type' , 'text/json' ) self . end_headers () self . wfile . write ( fh . read () . encode ()) def do_POST ( self ): if self . path == '/store.json' : length = self . headers [ 'content-length' ] data = self . rfile . read ( int ( length )) with open ( self . store_path , 'w' ) as fh : fh . write ( data . decode ()) self . send_response ( 200 ) server = HTTPServer (( '' , 8080 ), StoreHandler ) server . serve_forever ()","url":"blog/a-simple-python-webserver.html","tags":"Computing"}]}